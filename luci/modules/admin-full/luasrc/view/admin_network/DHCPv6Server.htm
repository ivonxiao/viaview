<%+header%>
<%-
json= require "luci.json"
leaseList={}
dhcpinfo={}
function ReadDhcpConfig()
	local start_pos
	local end_pos,key
	local leaseEntry
	local idx,idx1
	local lease_cnt,subnet
	fd=io.open('/etc/dhcp/dhcpd6.conf','r')
	if(fd ==nil) then
		return
	end
	for c in fd:lines(1) do		
		start_pos=string.find(c,'subnet6 ')
		if(start_pos) then
			end_pos=string.find(c,'/',start_pos+#('subnet6 '))
			if(end_pos) then 
				subnet=string.sub(c,start_pos+#('subnet6 '),end_pos-1)
				leaseEntry={}
				table.insert(leaseList,leaseEntry)
				leaseEntry.subnet=subnet
				start_pos=string.find(c,'{',end_pos+#('/'))
				if(start_pos) then
					mask=string.sub(c,end_pos+#('{'),start_pos-1)
					leaseEntry.mask=mask
				end					
			end	
		end	
		
		start_pos=string.find(c,'range6 ')
		if(start_pos) then
			end_pos=string.find(c,' ',start_pos+#('range6 '))
			if(end_pos) then 
				start=string.sub(c,start_pos+#('range6 '),end_pos-1)
				--print(start)
				leaseEntry.start=start
			end	
			start_pos=string.find(c,';',end_pos+#(' '))
			if(end_pos) then 
				end_ip=string.sub(c,end_pos+#(' '),start_pos-1)
				--print(end_ip)
				leaseEntry.end_ip=end_ip
			end	
		end	
		start_pos=string.find(c,'option domain-name-servers ',1,true)
		if(start_pos) then
			end_pos=string.find(c,',',start_pos+#('option domain-name-servers '))
			if(end_pos) then 
				primaryDNS=string.sub(c,start_pos+#('option domain-name-servers '),end_pos-1)
				if(leaseEntry) then
					leaseEntry.primaryDNS=primaryDNS
				end	
				start_pos=string.find(c,';',end_pos+#(','))
				if(start_pos) then 
					secondaryDNS=string.sub(c,end_pos+#(','),start_pos-1)
					if(leaseEntry) then
						leaseEntry.secondDNS=secondaryDNS
					end	
				end	
			else
				end_pos=string.find(c,';',start_pos+#('option domain-name-servers '))
				if(end_pos) then
					primaryDNS=string.sub(c,start_pos+#('option domain-name-servers '),end_pos-1)
					if(leaseEntry) then
						leaseEntry.primaryDNS=primaryDNS
					end	
				end	
			end	
		end	
		start_pos=string.find(c,'option domain-name "',1,true)
		if(start_pos) then
			end_pos=string.find(c,'";',start_pos+#('option domain-name "'))
			domain=string.sub(c,start_pos+#('option domain-name "'),end_pos-1)
			if(leaseEntry) then
				leaseEntry.domain=domain
			end	
		end	
		start_pos=string.find(c,'option routers ')
		if(start_pos) then
			end_pos=string.find(c,';',start_pos+#('option routers '))
			gateway=string.sub(c,start_pos+#('option routers '),end_pos-1)
			if(leaseEntry) then
				leaseEntry.gateway=gateway
			end	
		end	
		start_pos=string.find(c,'default-lease-time ',1,true)
		if(start_pos) then
			end_pos=string.find(c,';',start_pos+#('default-lease-time '))
			lease=string.sub(c,start_pos+#('default-lease-time '),end_pos-1)
			if(leaseEntry) then
				leaseEntry.lease=tonumber(lease)
			end	
		end	
		start_pos=string.find(c,'INTERFACE eth0')
		if(start_pos) then			
			leaseEntry.eth=0
			if(dhcpinfo.eth1 == nil) then
				dhcpinfo.eth1={}
			end	
			table.insert(dhcpinfo.eth1,leaseEntry)
		end	
		start_pos=string.find(c,'INTERFACE eth1')
		if(start_pos) then			
			leaseEntry.eth=1
			if(dhcpinfo.eth2 == nil) then
				dhcpinfo.eth2={}
			end	
			table.insert(dhcpinfo.eth2,leaseEntry)
		end	
		start_pos=string.find(c,'INTERFACE eth2')
		if(start_pos) then			
			leaseEntry.eth=2
			if(dhcpinfo.eth3 == nil) then
				dhcpinfo.eth3={}
			end	
			table.insert(dhcpinfo.eth3,leaseEntry)
		end	
		start_pos=string.find(c,'INTERFACE eth3')
		if(start_pos) then			
			leaseEntry.eth=3
			if(dhcpinfo.eth4 == nil) then
				dhcpinfo.eth4={}
			end	
			table.insert(dhcpinfo.eth4,leaseEntry)
		end	
	end	
	io.close(fd)

	lease_cnt=#leaseList
	idx=1	
	
	local function list2object(list) 
		if(list) then
			if(#(list) == 1) then
				list=list[1]
			end
		return list	
		end		
	end
	dhcpinfo.eth1=list2object(dhcpinfo.eth1)
	dhcpinfo.eth2=list2object(dhcpinfo.eth2)
	dhcpinfo.eth3=list2object(dhcpinfo.eth3)
	dhcpinfo.eth4=list2object(dhcpinfo.eth4)	
	dhcpinfo.dhcp6=0
	os.execute('rm -f /var/ac/dhcpstatus')
	os.execute('/etc/init.d/isc-dhcp6-server status >> /var/ac/dhcpstatus')
	fd=io.open('/var/ac/dhcpstatus','r')
	if(fd ~=nil) then
		for c in fd:lines(1) do
			start_pos=string.find(c,'dhcpd is running')
			if(start_pos) then
				dhcpinfo.dhcp6=1
				break				
			end
		end
	end	
	io.close(fd)	
end
ReadDhcpConfig()
-%>
<style>
	 #maincontent ul {margin:0;list-style:none}
	 #error_span{margin-left:5em;padding:10px;color:#f00;font-size:1.2em;background:#cc0;border-radius:15px 15px;display:none}
	 table{border-spacing:0;border-collapse:collapse;max-height:20em;overflow:auto;display:block}
	th,td{width:160px;border:1px solid #ccc;text-align:left;height:20px}
	fieldset ul ul{border:1px solid #ccc none}
	fieldset li{clear:left;padding:0.25em 0;border-bottom:1px dotted #bbb}
	li.last-item{border:none}
	select{width:155px}
	input:disabled,select:disabled{background:#ccc}
</style>
	<h2><a id="content" name="content">DHCPv6 Server Setting</a></h2>
	<div class="cbi-map-descr">User can set IPv6 DHCP server.
	<span id="error_span"></span>
	</div>
	<fieldset class="cbi-section">
		<legend>DHCPv6 Server Configuration Infomation</legend>
	<table>
		<thead>
		<tr>
			<th>NO.</th>
			<th>Start IP Address</th>
			<th>End IP Address</th>
			<th>IP Netmask</th>
		</tr>
		</thead>
		<tbody  id="dhcpinfo">			
		</tbody>
	</table>
	</fieldset>
	<form method="post" name="fDHCP" action="<%=controller%>/admin/network/DHCPConfigSave">
	<fieldset class="cbi-section">
		<legend>DHCP Server Configuration</legend>
		<ul>
			<li>
				<input type="checkbox" name="dhcp_switch" id="dhcp_switch" checked="checked" />
				<label for="dhcp_switch" class="cbi-value-title">Enable DHCP Server</label>
			</li>
			<li>
				<label for="Ethes" class="cbi-value-title">Bind Eth :</label>
				<select name="Ethes" id="Ethes">
					<option value="eth1">Eth1</option>
					<option value="eth2">Eth2</option>
					<option value="eth3">Eth3</option>
					<option value="eth4">Eth4</option>
				</select>
			</li>				
			<li>
				<label for="startIP" class="cbi-value-title">Start IP Address :</label>						
				<input type="input" name="startIP" id="startIP" />
			</li>
			<li>
				<label for="endIP" class="cbi-value-title">End IP Address :</label>						
				<input type="input" name="endIP" id="endIP" />
			</li>
			<li>
				<label for="mask" class="cbi-value-title">Netmask :</label>						
				<input type="input" name="mask" id="mask" />
			</li>
			<li>
				<label for="leaseTime" class="cbi-value-title">Lease Time :</label>						
				<input type="input" name="leaseTime" id="leaseTime" />
			</li>
			<li>
				<label for="gateway" class="cbi-value-title">Gateway :</label>						
				<input type="input" name="gateway" id="gateway" />
			</li>
			<li>
				<label for="domain" class="cbi-value-title">Domain :</label>						
				<input type="input" name="domain" id="domain" />
			</li>
			<li>
				<label for="primaryDNS" class="cbi-value-title">Primary DNS :</label>						
				<input type="input" name="primaryDNS" id="primaryDNS" />
			</li>
			<li class="last-item">
				<label for="backupDNS" class="cbi-value-title">Secondary DNS :</label>						
				<input type="input" name="backupDNS" id="backupDNS" />
			</li>			
		</ul>
		<input type="button" name="save" id="save" value="Add" />
		<input type="button" name="modify" id="modify" value="Modify" />
		<input type="button" name="del" id="del" value="Delete" />
		<input type="submit" value="Apply" />
	</fieldset>	
	</form>			
<script type="text/javascript" src="<%=resource%>/util.js"></script>
<script>
//<![CDATA[
var global={
	selectedID:-2,
	selectedSubID:-2
}	
var info={}
function loadOneSetting(clickObj) {
	var target=document.getElementById('dhcpinfo').rows;
	for(var i=0,l=target.length;i<l;i++) {
		target[i].style.background='';
	}	
	clickObj.style.background='#6cf';
	var mat=clickObj.id.match(/eth(\d)_(\d)/);
	var eth_id=-1,
		eth_subid=-1;
	if(mat) { //more than 1 setting of ether,format as 'eth1_1 or eth1'
		eth_id=mat[1];
		eth_subid=mat[2];
	}	
	else
		eth_id=+clickObj.id.charAt(3);
	global.selectedID=eth_id;
	global.selectedSubID=eth_subid;
	
	var dhcp_switch=document.getElementById('dhcp_switch'),
		classN=document.getElementById("classN"),
		idType=document.getElementById("idType"),
		valueType=document.getElementById("valueType"),
		fromByte=document.getElementById("fromByte"),
		byteLen=document.getElementById("byteLen"),
		optionVal=document.getElementById("optionValue"),
		start =document.getElementById("startIP"),
		end =document.getElementById("endIP"),
		mask = document.getElementById("mask"),
		leaseTime=document.getElementById("leaseTime"),
		gateway=document.getElementById("gateway"),
		domain=document.getElementById("domain"),
		primary=document.getElementById("primaryDNS"),
		secondary=document.getElementById("backupDNS"),
		sel=document.getElementById('Ethes');
	fDhcpEnable(dhcp_switch);				
	if(eth_subid !==-1) {		
		start.value=(info['eth'+eth_id][eth_subid].start)?info['eth'+eth_id][eth_subid].start:'';
		end.value=(info['eth'+eth_id][eth_subid].end_ip)?info['eth'+eth_id][eth_subid].end_ip:'';
		mask.value=(info['eth'+eth_id][eth_subid].mask)?info['eth'+eth_id][eth_subid].mask:'';
		leaseTime.value=(info['eth'+eth_id][eth_subid].lease)?info['eth'+eth_id][eth_subid].lease:'';
		gateway.value=(info['eth'+eth_id][eth_subid].gateway)?info['eth'+eth_id][eth_subid].gateway:'';
		domain.value=(info['eth'+eth_id][eth_subid].domain)?info['eth'+eth_id][eth_subid].domain:'';
		primary.value=(info['eth'+eth_id][eth_subid].primaryDNS)?info['eth'+eth_id][eth_subid].primaryDNS:'';
		secondary.value=(info['eth'+eth_id][eth_subid].secondDNS)?info['eth'+eth_id][eth_subid].secondDNS:'';
		sel.selectedIndex=eth_id -1;
	}
	else {		
		start.value=(info['eth'+eth_id].start)?info['eth'+eth_id].start:'';
		end.value=(info['eth'+eth_id].end_ip)?info['eth'+eth_id].end_ip:'';
		mask.value=(info['eth'+eth_id].mask)?info['eth'+eth_id].mask:'';
		leaseTime.value=(info['eth'+eth_id].lease)?info['eth'+eth_id].lease:'';
		gateway.value=(info['eth'+eth_id].gateway)?info['eth'+eth_id].gateway:'';
		domain.value=(info['eth'+eth_id].domain)?info['eth'+eth_id].domain:'';
		primary.value=(info['eth'+eth_id].primaryDNS)?info['eth'+eth_id].primaryDNS:'';
		secondary.value=(info['eth'+eth_id].secondDNS)?info['eth'+eth_id].secondDNS:'';
		sel.selectedIndex=eth_id -1;
	}		
}	

function newDHCPSetByEth() {
	info.dhcp6=(document.getElementById('dhcp_switch').checked)?1:0;  //dhcp
	if(info.dhcp6===0)return null;
	var error=document.getElementById('error_span');
	var classN=document.getElementById("classN"),
		idType=document.getElementById("idType"),
		valueType=document.getElementById("valueType"),
		fromByte=document.getElementById("fromByte"),
		byteLen=document.getElementById("byteLen"),
		optionVal=document.getElementById("optionValue"),
		start =document.getElementById("startIP"),
		end =document.getElementById("endIP"),
		mask = document.getElementById("mask"),
		leaseTime=document.getElementById("leaseTime"),
		gateway=document.getElementById("gateway"),
		domain=document.getElementById("domain"),
		primary=document.getElementById("primaryDNS"),
		secondary=document.getElementById("backupDNS"),
	    sel=document.getElementById('Ethes').selectedIndex;
	var list={};
	list.eth=sel;
	
	var start_match,
		end_match,
		mask_match,
		subnet;
	list.start=start.value;	
	start_match=util.match_ipv6_addr(list.start);
	if(!start_match) {
		error.innerHTML='start ip error';
		error.style.display='inline';
		return;
	}		
	list.end_ip = end.value;
	end_match=util.match_ipv6_addr(list.end_ip);
	if(!end_match) {
		error.innerHTML='end ip error';
		error.style.display='inline';
		return;
	}
	if(mask.value.match(/^\d+$/)) {
		list.mask=parseInt(mask.value,10);		
		if(list.mask>128) {
			error.innerHTML='netmask should be number between 0 to 128';
			error.style.display='inline';
			return;
		}	
	}	
	else {
		error.innerHTML='netmask should be number';
		error.style.display='inline';
		return;
	}
	subnet=util.calc_ipv6_net_no(list.start,list.mask);
	if(util.calc_ipv6_net_no(list.start,list.mask)!==util.calc_ipv6_net_no(list.end_ip,list.mask)) {
		error.innerHTML='start IP and end IP not in the same network';
		error.style.display='inline';
		return;
	}
	list.subnet=subnet;		
	if(leaseTime.value.match(/^\d+$/))
		list.lease=parseInt(leaseTime.value,10);
	else {
		error.innerHTML='lease time must be number';
		error.style.display='inline';
		return;
	}
	error.style.display='none';		
	if(gateway.value)
		list.gateway=gateway.value;	
	if(domain.value)
		list.domain=domain.value
	if(primary.value)
		list.primaryDNS= primary.value;
	if(secondary.value)
		list.secondDNS= secondary.value;
	return list;
}		
function showDHCPInfo() {
	var target=document.getElementById('dhcpinfo');
	var dhcp=document.getElementById('dhcp_switch');
	if(info.dhcp6)dhcp.checked=true;
	else dhcp.checked=false;
	fDhcpEnable(dhcp);
	var i,
		tmp,
		cnt=0,
		str_insert='',
		row,
		cell;
	//target.innerHTML='';
	for(i=target.rows.length-1;i>=0;i--) {
		target.deleteRow(i);
	}	
	for(i=1;i<5;i++) {
		tmp =info['eth'+i];
		if(tmp) {
			if(tmp.length) {
				cnt=tmp.length;
				for(var j=0;j<cnt;j++) {							
					row=document.createElement('tr');
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode('eth'+i));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp[j].start));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp[j].end_ip));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp[j].mask));
					row.appendChild(cell);
					target.appendChild(row);
					row.id='eth'+i+'_'+j;
					row.onclick=function(){var self=this;loadOneSetting(self);}
					//if(!tmp[j].subnet)
					//	tmp[j].subnet=subnet(tmp[j].start,tmp[j].mask);
				}	
			}
			else {							
					row=document.createElement('tr');
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode('eth'+i));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp.start));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp.end_ip));
					row.appendChild(cell);
					cell=document.createElement('td');
					cell.appendChild(document.createTextNode(tmp.mask));
					row.appendChild(cell);
					target.appendChild(row);
					row.id='eth'+i;
					row.onclick=function(){var self=this;loadOneSetting(self);}
					//if(!tmp.subnet)
					//	tmp.subnet=subnet(tmp.start,tmp.mask);
			}
		}		
	}
}
function fDhcpEnable(obj) {
	var i,cnt;
	var dhcp_ebl=obj;
	var status=dhcp_ebl.checked;
	//var option_switch =document.getElementById('options_switch'),
	 //   op_status=option_switch.checked;
	var all_inputs=document.getElementsByTagName('input');
	var all_sels=document.getElementsByTagName('select');
	if (status)
	{
		for(i=1,cnt=all_inputs.length-4;i<cnt;i++) {
			all_inputs[i].disabled = false;
		}	
		for(i=0,cnt=all_sels.length;i<cnt;i++) {
			all_sels[i].disabled = false;
		}
	}
	else
	{
		for(i=1,cnt=all_inputs.length-4;i<cnt;i++) {
			all_inputs[i].disabled = true;
		}
		for(i=0,cnt=all_sels.length;i<cnt;i++) {
			all_sels[i].disabled = true;
		}
	}
}

window.onload = function() {
	var dhcp_switch=document.getElementById('dhcp_switch');
	var save = document.getElementById('save'),
		modify=document.getElementById('modify'),
		del  =document.getElementById('del');
	var fDHCP= document.getElementsByTagName('form')[0];
	dhcp_switch.onclick=function(){fDhcpEnable(dhcp_switch);};	
	fDHCP.onsubmit=function(){var self=this;if(dhcp_switch.checked)info.dhcp6=1;else info.dhcp6=0;(new XHR()).post(self.action, {data:JSON.stringify(info)},function(){location.reload();});return false;};
	del.onclick=function() {
		if(global.selectedID===-2) //don't selected
			return;
		if(global.selectedSubID===-1) { //this eth have 1 record
			delete info['eth'+global.selectedID];
		}
		else {
			info['eth'+global.selectedID].splice(global.selectedSubID,1);
			if(info['eth'+global.selectedID].length===1) {
				info['eth'+global.selectedID]=info['eth'+global.selectedID][0];
			}	
		}
		showDHCPInfo();	
		global.selectedID=-2;
	};
	modify.onclick=function () {
		var record;
		if(global.selectedID===-2) //don't selected
			return;
		if(global.selectedSubID===-1) { //this eth have 1 record
			record=newDHCPSetByEth();
			if(record)info['eth'+global.selectedID]=record;
		}
		else {
			record=newDHCPSetByEth();
			if(record)info['eth'+global.selectedID][global.selectedSubID]=record;
		}
		showDHCPInfo();
		global.selectedID=-2;
	}	
	save.onclick =function(){
			var sel=document.getElementById('Ethes');
			var key=sel.options[sel.selectedIndex].value;
			var record;		
			
			if(info[key] ===undefined) {
				record=newDHCPSetByEth();				
				if(record) {
					//record.eth=+(key.charAt(3))-1;
					info[key]=record;
				}	
			}
			else {
				var tmp_list=info[key];				
				ret=newDHCPSetByEth();				
				if(ret) {
					if(tmp_list.length ===undefined) {
						info[key]=[];
						info[key].push(tmp_list);
					}	
					info[key].push(ret);	
				}			
			}
			showDHCPInfo();							
	};
	info=<%=json.encode(dhcpinfo)%>
	if(info==false)info={};
	showDHCPInfo();
	fDhcpEnable(dhcp_switch);
}	
//]]>
</script>
<%+footer%>
